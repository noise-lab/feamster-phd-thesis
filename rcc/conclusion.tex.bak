\section{Discussion and Conclusion}
\label{s:concl}


In recent years, much work has been done to understand BGP's
behavior, and much has been written about the wide range of problems it
has.  Some argue that BGP has outlived its purpose and should be
replaced; others argue that faults arise
because today's configuration languages are not
well-designed.  We believe that our evaluation of faults in
today's BGP configuration provides a better understanding of the
types of errors that appear in today's BGP configuration and the
problems in today's configuration languages.  Our findings should help
inform the design of wide-area routing systems in the future.

Despite the fact that BGP is almost 10 years old, operators continually make
the same mistakes as they did during BGP's infancy, and, regrettably, our
understanding of what it means for BGP to behave ``correctly'' is still
rudimentary.   This paper takes a step towards improving this state of
affairs by making the following contributions:
%\vspace*{-0.05in}
\begin{itemize}
\itemsep=-1pt
\item We define a high-level correctness specification for BGP and
  map that specification to conditions that can be tested with static
  analysis.
\item We use this specification to design and implement
  \rccns, a static analysis tool that detects faults by analyzing the
  BGP configuration across a single AS.  With \rccns, network operators
  can find many faults {\em before} deploying configurations in
  an operational network.  \rcc has been downloaded by over 65 network
  operators.
\item We use \rcc to explore the extent of real-world BGP
      misconfigurations.  We have analyzed
      real-world, deployed configurations from 17 different ASes and
      detected more than 1,000 BGP configuration faults that had
      previously gone undetected by operators.
\end{itemize}



%framework to the design and implementation of \rccns, a tool that uses
%static analysis to verify BGP configuration correctness.  Our tool has
%helped operators debug real-world BGP configuration.  Third, we
%present our findings on BGP configuration errors and anomalies from
%static analysis of real-world BGP configurations.  This paper is the
%first to explore BGP configuration errors using analysis of real-world
%BGP configuration files.  Finally, we suggest concrete ways to improve
%BGP's correctness, distinguishing problems that should be fixed with
%protocol modifications from those that should be fixed with a better
%configuration language.


In light of our findings, we suggest two ways to make interdomain
routing less prone to configuration faults.  First, protocol
improvements, particularly in intra-AS route dissemination, 
could avert many BGP configuration faults.  The current approach to
scaling iBGP should be replaced.  Route reflection serves a single,
relatively simple purpose, but it is the source of many faults, many of
which cannot be checked with static analysis of BGP configuration
alone~\cite{Griffin2002}.  The protocol that disseminates BGP routes
within an AS should enforce path visibility and route validity;
the Routing Control Platform~\cite{caesar2004} offers 
one possible solution.

Second, BGP should be configured with a centralized, higher-level
specification language.  Today's BGP configuration languages enable an
operator to specify router-level {\em mechanisms} that implement
high-level policy, but the distributed, low-level nature of the
configuration languages introduces complexity, obscurity, and
opportunities for misconfiguration rather than design flexibility or
expressiveness.  For example, \rcc detects many faults in implementation
of some high-level policies in low-level configuration; these faults
arise because there are many ways to implement the same high-level
policy, and the low-level configuration is unintuitive.  Ideally, a
network operator would never touch low-level mechanisms (\eg, the
community attribute) in the common case.  Rather than configuring
routers with a low-level language, an operator should configure the {\em
network} using a language that directly reflects high-level
policies.



%, and this specification could be ``compiled'' into
%configuration statements that implement the policies.
% (Such a specification would also be much easier to analyze
%with a tool like \rccns.)



%XXX FUTURE WORK: IGP/iBGP...

%% The hard stuff, like iBGP, isn't going to get better.  Same with things
%% like MED osc.  For these, we need protocol changes.  This is part of our
%% ongoing work (\eg, route servers to impose a total ordering, scrap iBGP
%% to avoid partitions, guarantee consistent export, etc.)

%% Same thing with safety.  It's fundamental to the protocol (Arrow's
%% impossibility thm), and protocol changes must happen to solve this
%% problem correctly.

%% For other stuff that people mess up, we need better interfaces.  These
%% interfaces should reflect that there are only a handful of tasks that
%% operators need to perform.
