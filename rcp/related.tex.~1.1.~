\subsection{Related Work}
\label{sec:related}

%% The goal of our work is to define a path for the evolutionary
%% change of interdomain routing. We achieve this within the context
%% of current BGP best practice as the de-facto interdomain routing standard.
%% As such our approach shares a heritage with previous
%% incremental changes to BGP, specifically efforts to 
%% address scalability for both iBGP and eBGP. 

This subsection briefly surveys related research in routing architectures.
Other approaches have been proposed for distributing routes
within an AS and between ASes.  Route reflectors~\cite{rfc2796}
eliminate the need for a full mesh between iBGP speakers, but they do not
correctly emulate full mesh iBGP:
route reflectors forward only a single route for
each prefix on behalf of its cluster, which may not be the route that
each client of that route reflector would have selected in a full mesh.
To address this shortcoming, RFC 1863 proposed that route servers
forward {\em all\/} routes to clients, rather than just a single best
route~\cite{rfc1863}. This proposal suggested using an ``advertiser''
attribute to allow recipients to know who advertised the routes.
Similarly, Basu {\em et al.} proposed 
modifying route reflectors to advertise all routes that are equally good
up to the MED step in the selection process to prevent iBGP route
oscillation~\cite{Basu2002}.
%; unfortunately, this optimization also
%requires modifying the routers. 
Because
these proposals require modifying BGP, they have not been widely
adopted.  
The route arbiter project proposed placing route servers at exchange
points~\cite{Govindan1998} to obviate the need for a full mesh
eBGP topology (\ie, at the exchange point) by applying policy once at
the route 
server.  This 
architecture facilitates centralized application of
BGP routing policies at a single exchange point; RCP also focuses on
improving other aspects of interdomain routing within an AS.

Several projects have advocated moving routing complexity to end hosts,
which query route servers to discover routes~\cite{Lakshminarayanan2004,
Yang2003}.  These projects share our goal of separating routing
complexity from the infrastructure, but RCP also simplifies aspects of
intra-AS routing and, unlike these proposals, does not focus on moving
route selection to end hosts 
%(although RCP could certainly be used
%to implement these architectures).  
Others have proposed working around the existing infrastructure using an
overlay to improve BGP's security~\cite{Goodell2003} or
robustness~\cite{Agarwal2003}.  RCP could be a reasonable
platform for deploying these architectures and overlay-based solutions.

%% In this case however, the
%% exchange is between eBGP speakers where routing policies are typically
%% applied to achieve the network's inter domain routing objectives. This
%% means that unlike the iBGP solutions above, these route servers have to
%% take into account the routing policies that routers ``would have
%% applied'' had there been a full mesh.  The route server therefor has to
%% be configured with and apply policies on behalf of each of its clients
%% and is therefore conceptually similar to our approach, but applied to
%% very specific interdomain environments.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Other related work involving improvements to BGP fall in two broad
%% categories namely, those that proposed incremental changes to some
%% aspect of the BGP protocol and those that proposed add-on solutions to
%% BGP. 

%% Other related work involves either proposing incremental changes to some
%% aspect of BGP or working around the existing infrastructure.  
%% %BGP scalable transport
%% %(BST)~\cite{bst:2003} proposed replacing the standard BGP transport
%% %protocol, (\ie, TCP), with an application level multipoint protocol.
%% This improvement requires changing the existing routing infrastructure,
%% which has hampered their adoption.  

The XORP project recognized that Internet research has suffered because
router platforms are closed and has proposed an open software router
interface to make all aspects of routing and forwarding both open and
extensible~\cite{Handley2002}.
%This project shares the goal of
%enabling networking research in routing but takes the approach of making
%the routers themselves run extensible software.  
In contrast, we propose making routing open and extensible by separating
the routing protocol logic from the routers themselves.  The IETF ForCES
working group has also recognized that innovation has suffered because
of the coupling between routing and forwarding~\cite{forces-wg}. In
response, the group has proposed a framework that separates an {\em
individual} network element into separate control and forwarding
elements, which can communicate over a variety of media (\eg, a
backplane, Ethernet, etc.).  The framework dictates that routing
protocols be implemented in the control elements~\cite{rfc3746}.  RCP is
complementary to the ForCES framework: for example, RCP's algorithms for
path selection could be implemented within one or more ForCES control
elements.

%% Various other projects have focused on measuring, modeling, and
%% manipulating behavior of various Internet routing protocols (\eg,
%% BGP~\cite{Feamster2004}, OSPF~\cite{ospfte}), but these proposed solutions are
%% effectively workarounds in the context of the existing protocols.  This
%% previous work explores how operators can ``twist knobs'' within the
%% framework of existing protocols; on the other hand, the RCP gives
%% operators more direct control over routing protocol behavior.

%Other related work
%\begin{itemize}
%\item Sharad's OPCA stuff~\cite{Agarwal2003} -- need to read this again
%\item Measure, model, control for TE~\cite{Feamster2004,ospfte}, though 
%the ``control'' is knob-twisting, not giving the ``final answer''
%\item anything on NCP in the voice world?
%\item Ion's ``routing as a service'' stuff for the internet indirection
%infrastructure
%\item Xorp/Click software router
%\end{itemize}



%% Our approach allows a clean separation between functionality that needs
%% to be in the forwarding path and control functionality that directs how
%% the forwarding path operates. This separation enables the ``removal'' of
%% control into the ERP and builds on earlier work that attempted to
%% control or impact network functionality from intelligence ``outside''
%% the network. For example, a framework to realize traffic engineering in
%% IP networks by measuring traffic in a specific topology, modeling and
%% optimizing the impact of IGP link weights and then applying such weight
%% settings to the network is presented in~\cite{ospfte}.  Another example
%% involves the off-line modeling of BGP route
%% selection~\cite{feamster:02} to enable traffic engineering and capacity
%%  planning. We note that a framework such as ours will greatly simplify
%% approaches like this, not only because of the logically centralized
%% nature of the routing information, but also because their would be no
%% need to deal with the idiosyncrasies of complex iBGP hierarchies. Also,
%% these approaches had very indirect control over the network,
%% \eg setting IGP weights and BGP policies to impact traffic flow. A
%% framework such as ours will allow more direct and finer grain control
%% that is not constrained by existing protocols and implementations.

%\begin{itemize}
%\itemsep=-1pt
%\item RPSL route servers
%\item At exchange points~\cite{Govindan1998}, to avoid $n^2$ mesh, by
%      receiving the routes and applying the policies in one place.
%      Similar to us in that RS makes decisions for everyone, but
%      for interdomain policy rather than intradomain behavior.
%\item Internally advertise all routes~\cite{rfc1863}, which requires
%      changes to BGP, and doesn't allow logic at the RS.
%\item change route reflector to forward all ``equally good'' 
%      routes~\cite{Basu2002}, though not backwards-compatible since
%      it sends multiple routes to the RR-client.  Also, BST.
%\end{itemize}
