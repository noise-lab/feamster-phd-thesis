%%%
%%% background.tex
%%%

\section{BorderGuard Using Direct eBGP Feeds}
\label{sec:problem}
%%%
%%% Intro
%%%
In this section, we formulate the BorderGuard problem and present a
solution that operates on a direct feed of the eBGP-learned routes
from each peer AS.  
%Table~\ref{tab:notation} summarizes the notation.
%we discuss the first four variables in this section and defer the rest
%to the following section.  
Throughout the paper, our discussion focuses on a single destination prefix,
since routing decisions for each prefix are independent.

%% \begin{table}
%% \begin{center}
%% \begin{small}
%% \begin{tabular}{|c|l|} \hline
%% \multicolumn{1}{|c|}{\bf Variable} &
%%   \multicolumn{1}{|c|}{\bf Definition} \\ \hline
%% $m$           & Number of peer ASes\\
%% $n_p$         & Number of eBGP sessions with peer $p$\\
%% $r_{p,u}$     & Route from peer $p$ via session $u$\\
%% $\lambda()$   & Function for ranking routes\\ \hline
%% $k$           & Number of border routers in local AS\\
%% $I_i()$       & Import policy at border router $i$\\
%% $b_i$         & Best route chosen at border router $i$\\
%% $peer(b_i)$   & Peer who advertised the route $b_i$\\
%% $Routers(p)$  & Set of border routers peering with $p$\\
%% \hline
%% \end{tabular}
%% \end{small}
%% \end{center}
%% \caption{BorderGuard notation: The first four variables are
%% introduced in Section~\ref{sec:problem} and the remainder in
%% Section~\ref{sec:algo}}
%% \label{tab:notation}
%% \end{table}

%%%
%%% Notation
%%%
A network has $m$ peer ASes $p=1,2, \ldots, m$ and has $n_p$ eBGP
sessions with peer $p$.  At any given time, the network has one
(possibly null) route $r_{p,u}$ for the prefix from each peering point
$u=1,2,\ldots,n_p$.  An advertisement message on session $u$ replaces
the old value of $r_{p,u}$ with a new route; a withdrawal replaces the
old value with a null route.  To compare the routes, we define a
function $\lambda(r_{p,u})$ that ranks a route based on the first five
steps of the BGP decision process in Table~\ref{tab:decision}---up to,
but not including, the ``hot potato'' step that chooses the route with
the closest egress point\footnote{Since the local-preference attribute
is local to an AS, an eBGP-learned route does not have a local
preference.  Also, all eBGP-learned routes would receive the same
treatment in step $5$ in the BGP decision process.  As such, only the
AS path length, origin type, and MED affect the comparison between two
eBGP-learned routes.  Steps $1$ and $5$ are important in
Section~\ref{sec:algo}, though, to compare the ``best'' routes seen in
different {\em iBGP\/} data feeds.}.  A lower value of $\lambda(r)$
implies a less attractive route (e.g., a route with a longer AS path
length); a null route has the lowest possible value.  We consider a
peer as {\em inconsistent\/} if $\lambda(r_{p,u}) \neq
\lambda(r_{p,v})$ for some $u,v\in [1,n_p]$.

%%%
%%% Our algorithm
%%%
Our algorithm applies this check to streams of eBGP data from a given
peer.  Upon receiving an update message on session $u$, the algorithm
compares $\lambda(r_{p,u})$ to the values $\lambda(r_{p,v})$ for $v\in
[1,n_p]$ and reports any mismatches.  In the next section, we present
a second algorithm that operates on streams of the ``best'' BGP route
from each border router in the local AS.
